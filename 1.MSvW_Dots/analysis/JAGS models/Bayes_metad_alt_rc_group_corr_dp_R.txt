
data{ 
	for(s in 1:nsubj){

		#### INCLUDE N OR S UP HERE ###
        	N[s] <- sum(counts[s,1:nratings*2])
        	S[s] <- sum(counts[s,(nratings*2)+1:nratings*4])
		####################

		M[s,1] <- sum(counts1[s,(nratings[1]*2+1):(nratings[1]*3)])
		CR[s,1] <- sum(counts1[s,1:nratings[1]])

		H[s,1] <- sum(counts1[s,(nratings[1]*3+1):(nratings[1]*4)])
		FA[s,1] <- sum(counts1[s,(nratings[1]+1):(nratings[1]*2)])

		M[s,2] <- sum(counts2[s,(nratings[2]*2+1):(nratings[2]*3)])
		CR[s,2] <- sum(counts2[s,1:nratings[2]])

		H[s,2] <- sum(counts2[s,(nratings[2]*3+1):(nratings[2]*4)])
		FA[s,2] <- sum(counts2[s,(nratings[2]+1):(nratings[2]*2)])
 
	} 
} 
 
model { 
	for(s in 1:nsubj){ 
		## TYPE 2 SDT MODEL (META-D) 
		# Multinomial likelihood for response counts ordered as c(nR_S1,nR_S2) 
		counts1[s,1:nratings[1]] ~ dmulti(prT[s,1:nratings[1],1],CR[s,1])
		counts1[s,(nratings[1]*2+1):(nratings[1]*3)] ~ dmulti(prT[s,(nratings[1]*2+1):(nratings[1]*3),1],M[s,1])
		counts1[s,(nratings[1]+1):(nratings[1]*2)] ~ dmulti(prT[s,(nratings[1]+1):(nratings[1]*2),1],FA[s,1])
		counts1[s,(nratings[1]*3+1):(nratings[1]*4)] ~ dmulti(prT[s,(nratings[1]*3+1):(nratings[1]*4),1],H[s,1])
		counts2[s,1:nratings[2]] ~ dmulti(prT[s,1:nratings[2],2],CR[s,2])
		counts2[s,(nratings[2]*2+1):(nratings[2]*3)] ~ dmulti(prT[s,(nratings[2]*2+1):(nratings[2]*3),2],M[s,2])
		counts2[s,(nratings[2]+1):(nratings[2]*2)] ~ dmulti(prT[s,(nratings[2]+1):(nratings[2]*2),2],FA[s,2])
		counts2[s,(nratings[2]*3+1):(nratings[2]*4)] ~ dmulti(prT[s,(nratings[2]*3+1):(nratings[2]*4),2],H[s,2]) 
 
		for (task in 1:ntask) { 
			######## INCLUDE D' ESTIMATION HERE ######
			## TYPE 1 SDT BINOMIAL MODEL
   			H[s,task] ~ dbin(h[s,task],S[s,task])
    			FA[s,task] ~ dbin(f[s,task],N[s,task])
    			h[s,task] <- phi(d1[s,task]/2-c1[s,task])
    			f[s,task] <- phi(-d1[s,task]/2-c1[s,task])
    			# Type 1 priors #
    			c1[s,task] ~ dnorm(mu_c[task], lambda_c[task])
    			d1[s,task] ~ dnorm(mu_d1[task], lambda_d1[task])
			########################################

			# Means of SDT distributions 
			mu[s,task] <- Mratio[s,task]*d1[s,task] 
			S2mu[s,task] <- mu[s,task]/2 
			S1mu[s,task] <- -mu[s,task]/2 
 
			# Specify ordered prior on criteria (bounded above and below by Type 1 c) 
			for (j in 1:(nratings[task]-1)) { 
				cS1_raw[s,j,task] ~ dnorm(-mu_c2[task], lambda_c2[task]) T(,c1[s,task]) 
				cS2_raw[s,j,task] ~ dnorm(mu_c2[task], lambda_c2[task]) T(c1[s,task],) 
			} 
			cS1[s,1:(nratings[task]-1),task] <- sort(cS1_raw[s,1:(nratings[task]-1),task]) 
			cS2[s,1:(nratings[task]-1),task] <- sort(cS2_raw[s,1:(nratings[task]-1),task]) 
 
			Mratio[s,task] <- exp(logMratio[s,task]) 
		} 
 
		# Calculate normalisation constants 
		C_area_rS1[s,1] <- phi(c1[s,1] - S1mu[s,1])
		I_area_rS1[s,1] <- phi(c1[s,1] - S2mu[s,1])
		C_area_rS2[s,1] <- 1-phi(c1[s,1] - S2mu[s,1])
		I_area_rS2[s,1] <- 1-phi(c1[s,1] - S1mu[s,1])
		C_area_rS1[s,2] <- phi(c1[s,2] - S1mu[s,2])
		I_area_rS1[s,2] <- phi(c1[s,2] - S2mu[s,2])
		C_area_rS2[s,2] <- 1-phi(c1[s,2] - S2mu[s,2])
		I_area_rS2[s,2] <- 1-phi(c1[s,2] - S1mu[s,2]) 
 
		#Get nC_rS1 probs task 1 rS_1&2
		pr[s,1,1] <- phi(cS1[s,1,1] - S1mu[s,1])/C_area_rS1[s,1]
		for (k in 1:(nratings[1]-2)) {
			pr[s,k+1,1] <- (phi(cS1[s,k+1,1] - S1mu[s,1])-phi(cS1[s,k,1] - S1mu[s,1]))/C_area_rS1[s,1]
		}
		pr[s,nratings[1],1] <- (phi(c1[s,1] - S1mu[s,1])-phi(cS1[s,nratings[1]-1,1] - S1mu[s,1]))/C_area_rS1[s,1]

		#Get nI_rS1 probs task 1 rS_1&2
		pr[s,(nratings[1]*2)+1, 1] <- phi(cS1[s,1,1] - S2mu[s,1])/I_area_rS1[s,1]
		for (k in 1:(nratings[1]-2)) {
			pr[s,nratings[1]*2+1+k,1] <- (phi(cS1[s,k+1,1] - S2mu[s,1])-phi(cS1[s,k,1] - S2mu[s,1]))/I_area_rS1[s,1]
		}
		pr[s,nratings[1]*3,1] <- (phi(c1[s,1] - S2mu[s,1])-phi(cS1[s,nratings[1]-1,1] - S2mu[s,1]))/I_area_rS1[s,1]

		#Get nI_rS2 probs task 1 rS_1&2
		pr[s,nratings[1]+1,1] <- ((1-phi(c1[s,1] - S1mu[s,1]))-(1-phi(cS2[s,1,1] - S1mu[s,1])))/I_area_rS2[s,1]
		for (k in 1:(nratings[1]-2)) {
			pr[s,nratings[1]+1+k,1] <- ((1-phi(cS2[s,k,1] - S1mu[s,1]))-(1-phi(cS2[s,k+1,1] - S1mu[s,1])))/I_area_rS2[s,1]
		}
		pr[s,nratings[1]*2,1] <- (1-phi(cS2[s,nratings[1]-1,1] - S1mu[s,1]))/I_area_rS2[s,1]

		#Get nC_rS2 probs task 1 rS_1&2
		pr[s,(nratings[1]*3)+1,1] <- ((1-phi(c1[s,1] - S2mu[s,1]))-(1-phi(cS2[s,1,1] - S2mu[s,1])))/C_area_rS2[s,1]
		for (k in 1:(nratings[1]-2)) {
			pr[s,nratings[1]*3+1+k,1] <- ((1-phi(cS2[s,k,1] - S2mu[s,1]))-(1-phi(cS2[s,k+1,1] - S2mu[s,1])))/C_area_rS2[s,1]
		}
		pr[s,nratings[1]*4,1] <- (1-phi(cS2[s,nratings[1]-1,1] - S2mu[s,1]))/C_area_rS2[s,1]

		#Get nC_rS1 probs task 2 rS_1&2
		pr[s,1,2] <- phi(cS1[s,1,2] - S1mu[s,2])/C_area_rS1[s,2]
		for (k in 1:(nratings[2]-2)) {
			pr[s,k+1,2] <- (phi(cS1[s,k+1,2] - S1mu[s,2])-phi(cS1[s,k,2] - S1mu[s,2]))/C_area_rS1[s,2]
		}
		pr[s,nratings[2],2] <- (phi(c1[s,2] - S1mu[s,2])-phi(cS1[s,nratings[2]-1,2] - S1mu[s,2]))/C_area_rS1[s,2]

		#Get nI_rS1 probs task 2 rS_1&2
		pr[s,(nratings[2]*2)+1, 2] <- phi(cS1[s,1,2] - S2mu[s,2])/I_area_rS1[s,2]
		for (k in 1:(nratings[2]-2)) {
			pr[s,nratings[2]*2+1+k,2] <- (phi(cS1[s,k+1,2] - S2mu[s,2])-phi(cS1[s,k,2] - S2mu[s,2]))/I_area_rS1[s,2]
		}
		pr[s,nratings[2]*3,2] <- (phi(c1[s,2] - S2mu[s,2])-phi(cS1[s,nratings[2]-1,2] - S2mu[s,2]))/I_area_rS1[s,2]

		#Get nI_rS2 probs task 2 rS_1&2
		pr[s,nratings[2]+1,2] <- ((1-phi(c1[s,2] - S1mu[s,2]))-(1-phi(cS2[s,1,2] - S1mu[s,2])))/I_area_rS2[s,2]
		for (k in 1:(nratings[2]-2)) {
			pr[s,nratings[2]+1+k,2] <- ((1-phi(cS2[s,k,2] - S1mu[s,2]))-(1-phi(cS2[s,k+1,2] - S1mu[s,2])))/I_area_rS2[s,2]
		}
		pr[s,nratings[2]*2,2] <- (1-phi(cS2[s,nratings[2]-1,2] - S1mu[s,2]))/I_area_rS2[s,2]

		#Get nC_rS2 probs task 2 rS_1&2
		pr[s,(nratings[2]*3)+1,2] <- ((1-phi(c1[s,2] - S2mu[s,2]))-(1-phi(cS2[s,1,2] - S2mu[s,2])))/C_area_rS2[s,2]
		for (k in 1:(nratings[2]-2)) {
			pr[s,nratings[2]*3+1+k,2] <- ((1-phi(cS2[s,k,2] - S2mu[s,2]))-(1-phi(cS2[s,k+1,2] - S2mu[s,2])))/C_area_rS2[s,2]
		}
		pr[s,nratings[2]*4,2] <- (1-phi(cS2[s,nratings[2]-1,2] - S2mu[s,2]))/C_area_rS2[s,2]
 
		# Avoid underflow of probabilities 
		for(i in c(1:nratings[1], (nratings[1]*2+1):(nratings[1]*3))){
			prT[s,i,1] <- ifelse(pr[s,i,1] < Tol, Tol, pr[s,i,1])
		}
		for(i in c((nratings[1]+1):(nratings[1]*2), (nratings[1]*3+1):(nratings[1]*4))){
			prT[s,i,1] <- ifelse(pr[s,i,1] < Tol, Tol, pr[s,i,1])
		}
		for(i in c(1:nratings[2], (nratings[2]*2+1):(nratings[2]*3))){
			prT[s,i,2] <- ifelse(pr[s,i,2] < Tol, Tol, pr[s,i,2])
		}
		for(i in c((nratings[2]+1):(nratings[2]*2), (nratings[2]*3+1):(nratings[2]*4))){
			prT[s,i,2] <- ifelse(pr[s,i,2] < Tol, Tol, pr[s,i,2])
		} 
 
		# Draw log(M)'s from bi/multivariate Gaussian 
		logMratio[s,1:ntask] ~ dmnorm.vcov(mu_logMratio[], T[,]) #dmnorm(mu_logMratio[], TI[,]) 
	} 
 
	#hyperpriors 
	for(t in 1:ntask){
		### ADD IN D' HYPERPRIORS HERE #####
		mu_d1[t] ~ dnorm(0, 0.01)
    		mu_c[t] ~ dnorm(0, 0.01)	
		sigma_d1[t] ~ dnorm(0, 0.01) I(0, )
    		sigma_c[t] ~ dnorm(0, 0.01) I(0, )
    		lambda_d1[t] <- pow(sigma_d1, -2)
    		lambda_c[t] <- pow(sigma_c, -2)
		###################

		mu_c2[t] ~ dnorm(0, 0.01) #note paper uses N(M,SD), JAGS uses N(M,Tau), where T=1/(SD^2) 
		sigma_c2[t] ~ dnorm(0, 0.01) I(0, ) 
		lambda_c2[t] <- pow(sigma_c2[t], -2)

		mu_logMratio[t] ~ dnorm(0, 1)
		lambda_logMratio[t] ~ dgamma(0.001,0.001) 
		sigma_logMratio[t] <- 1/sqrt(lambda_logMratio[t]) 
	} 
 
	for(r in 1:1){
		rho[r] ~ dunif(-1,1)
	} 
 
	T[1,1] <- sigma_logMratio[1]^2 
	T[1,2] <- rho[1]*sigma_logMratio[1]*sigma_logMratio[2] 
	T[2,1] <- rho[1]*sigma_logMratio[2]*sigma_logMratio[1] 
	T[2,2] <- sigma_logMratio[2]^2 
}